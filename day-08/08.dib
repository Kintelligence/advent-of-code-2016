#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

open System.IO
open System.Collections.Generic

#!fsharp

type Screen = {
    width: int;
    height: int;
    pixels: bool[,]
}

#!fsharp

let print (screen: Screen): Screen = 
    let builder = new StringBuilder()

    for row = 0 to screen.height - 1 do
        for col = 0 to screen.width - 1 do
            let pixel = screen.pixels.[col,row]
            
            if pixel then 
                builder.Append("#") |> ignore
            else
                builder.Append(".") |> ignore
        builder.AppendLine("") |> ignore
    builder.AppendLine("") |> ignore
    Console.Write(builder.ToString())
    screen

#!fsharp

let rect (columns: int) (rows: int) (screen: Screen): Screen =
    { screen with pixels = Array2D.init screen.width screen.height (fun x y -> 
                                                                            if x < columns && y < rows then
                                                                                true
                                                                            else
                                                                                screen.pixels[x, y]
    )}

#!fsharp

let rcolumn (column: int) (rows: int) (screen: Screen): Screen =
    { screen with pixels = Array2D.init screen.width screen.height (fun x y -> 
                                                                            if x = column then
                                                                                screen.pixels[x, (y + screen.height - rows) % screen.height]
                                                                            else
                                                                                screen.pixels[x, y]
    )}

#!fsharp

let rrow (row: int) (columns: int) (screen: Screen): Screen =
    { screen with pixels = Array2D.init screen.width screen.height (fun x y -> 
                                                                            if y = row then
                                                                                screen.pixels[(x + screen.width - columns) % screen.width, y]
                                                                            else
                                                                                screen.pixels[x, y]
    )}

#!fsharp

let countTrueValues (screen: Screen): Screen =
    let mutable count = 0
    for i = 0 to screen.width - 1 do
        for j = 0 to screen.height - 1 do
            if screen.pixels.[i, j] then
                count <- count + 1
    display count |> ignore
    screen

#!fsharp

{
    width = 7;
    height = 3;
    pixels = Array2D.init 7 3 (fun x y -> false)
}
|> rect 3 2
|> print
|> rcolumn 1  1
|> print
|> rrow 0  4
|> print
|> rcolumn 1  1
|> print
|> ignore

#!fsharp

{
    width = 50;
    height = 6;
    pixels = Array2D.init 50 6 (fun x y -> false)
}
|> rect 1 1
|> rrow 0 5
|> rect 1 1
|> rrow 0 5
|> rect 1 1
|> rrow 0 5
|> rect 1 1
|> rrow 0 5
|> rect 1 1
|> rrow 0 2
|> rect 1 1
|> rrow 0 2
|> rect 1 1
|> rrow 0 3
|> rect 1 1
|> rrow 0 3
|> rect 2 1
|> rrow 0 2
|> rect 1 1
|> rrow 0 3
|> rect 2 1
|> rrow 0 2
|> rect 1 1
|> rrow 0 3
|> rect 2 1
|> rrow 0 5
|> rect 4 1
|> rrow 0 5
|> rcolumn 0 1
|> rect 4 1
|> rrow 0 10
|> rcolumn 5 2
|> rcolumn 0 1
|> rect 9 1
|> rrow 2 5
|> rrow 0 5
|> rcolumn 0 1
|> rect 4 1
|> rrow 2 5
|> rrow 0 5
|> rcolumn 0 1
|> rect 4 1
|> rcolumn 40 1
|> rcolumn 27 1
|> rcolumn 22 1
|> rcolumn 17 1
|> rcolumn 12 1
|> rcolumn 7 1
|> rcolumn 2 1
|> rrow 2 5
|> rrow 1 3
|> rrow 0 5
|> rect 1 3
|> rrow 2 10
|> rrow 1 7
|> rrow 0 2
|> rcolumn 3 2
|> rcolumn 2 1
|> rcolumn 0 1
|> rect 4 1
|> rrow 2 5
|> rrow 1 3
|> rrow 0 3
|> rect 1 3
|> rcolumn 45 1
|> rrow 2 7
|> rrow 1 10
|> rrow 0 2
|> rcolumn 3 1
|> rcolumn 2 2
|> rcolumn 0 1
|> rect 4 1
|> rrow 2 13
|> rrow 0 5
|> rcolumn 3 1
|> rcolumn 0 1
|> rect 4 1
|> rrow 3 10
|> rrow 2 10
|> rrow 0 5
|> rcolumn 3 1
|> rcolumn 2 1
|> rcolumn 0 1
|> rect 4 1
|> rrow 3 8
|> rrow 0 5
|> rcolumn 3 1
|> rcolumn 2 1
|> rcolumn 0 1
|> rect 4 1
|> rrow 3 17
|> rrow 2 20
|> rrow 0 15
|> rcolumn 13 1
|> rcolumn 12 3
|> rcolumn 10 1
|> rcolumn 8 1
|> rcolumn 7 2
|> rcolumn 6 1
|> rcolumn 5 1
|> rcolumn 3 1
|> rcolumn 2 2
|> rcolumn 0 1
|> rect 14 1
|> rrow 1 47
|> rcolumn 9 1
|> rcolumn 4 1
|> rrow 3 3
|> rrow 2 10
|> rrow 1 8
|> rrow 0 5
|> rcolumn 2 2
|> rcolumn 0 2
|> rect 3 2
|> rrow 3 12
|> rrow 2 10
|> rrow 0 10
|> rcolumn 8 1
|> rcolumn 7 3
|> rcolumn 5 1
|> rcolumn 3 1
|> rcolumn 2 1
|> rcolumn 1 1
|> rcolumn 0 1
|> rect 9 1
|> rrow 0 20
|> rcolumn 46 1
|> rrow 4 17
|> rrow 3 10
|> rrow 2 10
|> rrow 1 5
|> rcolumn 8 1
|> rcolumn 7 1
|> rcolumn 6 1
|> rcolumn 5 1
|> rcolumn 3 1
|> rcolumn 2 2
|> rcolumn 1 1
|> rcolumn 0 1
|> rect 9 1
|> rcolumn 32 4
|> rrow 4 33
|> rrow 3 5
|> rrow 2 15
|> rrow 0 15
|> rcolumn 13 1
|> rcolumn 12 3
|> rcolumn 10 1
|> rcolumn 8 1
|> rcolumn 7 2
|> rcolumn 6 1
|> rcolumn 5 1
|> rcolumn 3 1
|> rcolumn 2 1
|> rcolumn 1 1
|> rcolumn 0 1
|> rect 14 1
|> rcolumn 39 3
|> rcolumn 35 4
|> rcolumn 20 4
|> rcolumn 19 3
|> rcolumn 10 4
|> rcolumn 9 3
|> rcolumn 8 3
|> rcolumn 5 4
|> rcolumn 4 3
|> rrow 5 5
|> rrow 4 5
|> rrow 3 33
|> rrow 1 30
|> rcolumn 48 1
|> rcolumn 47 5
|> rcolumn 46 5
|> rcolumn 45 1
|> rcolumn 43 1
|> rcolumn 38 3
|> rcolumn 37 3
|> rcolumn 36 5
|> rcolumn 35 1
|> rcolumn 33 1
|> rcolumn 32 5
|> rcolumn 31 5
|> rcolumn 30 1
|> rcolumn 23 4
|> rcolumn 22 3
|> rcolumn 21 3
|> rcolumn 20 1
|> rcolumn 12 2
|> rcolumn 11 2
|> rcolumn 3 5
|> rcolumn 2 5
|> rcolumn 1 3
|> rcolumn 0 4
|> countTrueValues
|> print
|> ignore
